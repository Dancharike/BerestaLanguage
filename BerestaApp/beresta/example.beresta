/*
// базовая математика
    a = 10;
    b = 20;

    c = (a + b) / -2;

// условия if()
    if(a < b and b > a)
    {
        c = 1;
        console_print(c);
    }
    else
    {
        c = 0;
        console_print(c);
    }

    if(a > b or b < a)
    {
        c = 1;
        console_print(c);
    }
    else
    {
        c = 0;
        console_print(c);
    }

    if(a < b)
    {
        c = a + b;
        console_print(c);
    }

    x = 5;
    y = 10;

    if(x > y)
    {
        console_print(x);
    }
    else if(x < y)
    {
        z = x + y;
        console_print(z);
    }

// условие while()
    i = 0;
    while(i < 5)
    {
        console_print(i);
        i = i + 1;
    }

// условие repeat()
    i = 0;
    repeat(5)
    {
        console_print(int_random_range(1, 10));
        i = i + 1;
    }

// условие for()
    for(let i = 0; i < 3; i = i + 1)
    {
        console_print(3);
    }

// вызов и работа с функциями
    c = 1;
    console_print(c + 5);

    // базовая игровая математика
    console_print(sqr(9));
    console_print(sqrt(9), sqrt(16 + 9));
    console_print(frac(3.14));
    console_print(mean(1, 2, 3, 4));
    console_print(median(1, 9, 3, 7));
    console_print(power(2, 10));
    console_print(ln(25));
    console_print(log2(1024));
    console_print(log10(10000));
    console_print(logn(5, 25));
    console_print(clamp(17, 0, 10));
    console_print(lerp(0.0, 100.0, 0.3));
    console_print(choose_from(10, 20, 30, 40));
    console_print(random(1));
    console_print(random_range(0, 10));
    console_print(int_random(5));
    console_print(int_random_range(5, 15));

    // тригонометрия
    console_print(sin(3.14159 / 2));
    console_print(cos(0));
    console_print(tan(3.14159));
    console_print(arcsin(0));
    console_print(arccos(0));
    console_print(arctan(0));
    console_print(arctan2(1, 1));
    console_print(dsin(90));
    console_print(dcos(45));
    console_print(dtan(45)); // 90 и 270 будут выдавать ошибку, ибо уходят к бесконечности
    console_print(darcsin(-1));
    console_print(darccos(-1));
    console_print(darctan(1));
    console_print(darctan2(1, 1));
    console_print(point_direction(0, 0, 1, 0));
    console_print(point_distance(0, 0, 3, 4));
    console_print(lengthdir_x(64, 90));
    console_print(lengthdir_y(64, 90));

    // матрицы
    matrix_set(1, 0, 0, 1, 10, 20);
    console_print(matrix_get());

    matrix_build(1, 1, 45, 100, 200);
    console_print(matrix_get());

    matrix_identity();
    console_print(matrix_get());

    matrix_build(1, 1, 45, 100, 200);
    matrix_multiply(1, 0, 0, 1, 10, 10);
    console_print(matrix_get());

    matrix_build(1, 1, 45, 100, 200);
    matrix_inverse();
    console_print(matrix_get());

    matrix_build(2, 2, 0, 100, 100);
    console_print(matrix_transform_vertex(10, 10));

// обработка пользовательских функций
    public function add(a, b)
    {
        return a + b;
    }

    let answer = add(2, 3);
    console_print(answer);

// рабочая рекурсия в функциях
    public function fact(n)
    {
        if(n <= 1) {return 1;}
        return n * fact(n - 1);
    }

    let answer = fact(5);

    console_print(answer);

// работающий вызов публичных функций из других файлов в папке проекта, смотреть calculations.beresta
    let answer = calculate(5, 10, 2);
    console_print(answer);

// функции теперь могут быть без возврата, тогда просто в консоли будет это отображено
// к этому добавил обработку строк, как новый динамический тип
    private function greet(name)
    {
        console_print("Hello " + name);
    }

    let x = greet("Denis");
    //console_print(x);
*/


